{"pages":[{"title":"About","text":"2017Fall 機械設計工程系 CADP & CP 課程倉儲: https://mde1a1.kmol.info/2017fall 課程投影片: https://mde1a1.kmol.info/2017fall/doc/trunk/index.html 課程網誌: https://mde1a1.kmol.info/2017fall/doc/trunk/blog/","tags":"misc","url":"https://cpa.kmol.info/40623123/doc/trunk/blog/pages/about/"},{"title":"2017 Fall CP 第16-18週","text":"準備期末報告周 程式碼 -呈現 class Dialog(QDialog, Ui_Dialog): def __init__(self, parent=None): super(Dialog, self).__init__(parent) self.setupUi(self) self.waitingForOperand = True #數字鈕連接函式 (Function) for button in [ self.one, self.two, self.three, self.four, self.five, self.six, self.seven, self.eight, self.nine, self.zero ]: button.clicked.connect(self.digitClicked) #Clear 鈕連接函式 self.clearButton.clicked.connect(self.clear) #Clear all 鈕連接函式 self.clearAllButton.clicked.connect(self.clearAll) #backspace 鈕連接函式 self.backspaceButton.clicked.connect(self.backspaceClicked) #小數點按鈕連接函式 self.pointButton.clicked.connect(self.pointClicked) #運算子 (加減、乘除) self.pendingAdditiveOperator = '' self.pendingMultiplicativeOperator = '' #加減號按鈕連接函式 for button in [self.plusButton, self.minusButton]: button.clicked.connect(self.additiveOperatorClicked) #乘除號按鈕連接函式 for button in [self.timesButton, self.divisionButton]: button.clicked.connect(self.multiplicativeOperatorClicked) #等於按鈕連接函式 self.equalButton.clicked.connect(self.equalClicked) def digitClicked(self): #取得傳送信號的物件 clickedButton = self.sender() #按鈕上的數字 digitValue = int(clickedButton.text()) #當顯示的文字為 0，而且此數字為 0。 if self.display.text() == '0' and digitValue == 0.0: #回傳 (終止函式) return #如果需要等待操作 if self.waitingForOperand: #清除顯示 self.display.clear() #重設此物件的狀態 self.waitingForOperand = False #顯示數字 self.display.setText(self.display.text() + str(digitValue)) def clear(self): if self.waitingForOperand: return #重新顯示 0 self.display.setText('0') self.waitingForOperand = True #重設所有狀態 def clearAll(self): self.sumSoFar = 0.0 self.factorSoFar = 0.0 self.pendingAdditiveOperator = '' self.pendingMultiplicativeOperator = '' self.display.setText('0') self.waitingForOperand = True def backspaceClicked(self): if self.waitingForOperand: return #取得螢幕上的文字 (拿走最後一項) text = self.display.text()[:-1] #如果沒有文字 if not text: text = '0' self.waitingForOperand = True #設定數字到螢幕上 self.display.setText(text) def pointClicked(self): ''' 如果等待輸入， 按下小數點，相當於輸入 0.xxx， 因此自動補零。 ''' if self.waitingForOperand: self.display.setText('0') #若沒有小數點，補上。 if \".\" not in self.display.text(): self.display.setText(self.display.text() + \".\") self.waitingForOperand = False def additiveOperatorClicked(self): clickedButton = self.sender() #取得按鈕符號 (運算子) clickedOperator = clickedButton.text() #取得螢幕上的文字，轉成小數 operand = float(self.display.text()) #如果有乘除運算子 if self.pendingMultiplicativeOperator: #如果計算，且失敗。 if not self.calculate(operand, self.pendingMultiplicativeOperator): self.abortOperation() return #先顯示結果 self.display.setText(str(self.factorSoFar)) #儲存結果到 operand 名稱 (name) 裡。 operand = self.factorSoFar self.factorSoFar = 0.0 self.pendingMultiplicativeOperator = '' #如果有加減運算子 if self.pendingAdditiveOperator: #如果計算，且失敗。 if not self.calculate(operand, self.pendingAdditiveOperator): self.abortOperation() return #顯示結果 self.display.setText(str(self.sumSoFar)) else: #如果沒有加減運算子，儲存乘除的結果。 self.sumSoFar = operand #儲存按鈕符號 self.pendingAdditiveOperator = clickedOperator self.waitingForOperand = True def multiplicativeOperatorClicked(self): clickedButton = self.sender() clickedOperator = clickedButton.text() operand = float(self.display.text()) if self.pendingMultiplicativeOperator: if not self.calculate(operand, self.pendingMultiplicativeOperator): self.abortOperation() return self.display.setText(str(self.factorSoFar)) else: self.factorSoFar = operand self.pendingMultiplicativeOperator = clickedOperator self.waitingForOperand = True \"\"\" 計算 (被除數, 運算子)，回傳計算結果 True: 成功 False: 失敗 \"\"\" def calculate(self, rightOperand, pendingOperator): if pendingOperator == \"+\": self.sumSoFar += rightOperand elif pendingOperator == \"-\": self.sumSoFar -= rightOperand elif pendingOperator == \"*\": self.factorSoFar *= rightOperand elif pendingOperator == \"/\": #防止除零 if rightOperand == 0.0: return False self.factorSoFar /= rightOperand return True #Error 畫面 \"####\" def abortOperation(self): self.clearAll() self.display.setText(\"四設計一甲40623123\") def equalClicked(self): operand = float(self.display.text()) if self.pendingMultiplicativeOperator: if not self.calculate(operand, self.pendingMultiplicativeOperator): self.abortOperation() return operand = self.factorSoFar self.factorSoFar = 0.0 self.pendingMultiplicativeOperator = '' if self.pendingAdditiveOperator: if not self.calculate(operand, self.pendingAdditiveOperator): self.abortOperation() return self.pendingAdditiveOperator = '' else: self.sumSoFar = operand self.display.setText(str(self.sumSoFar)) self.sumSoFar = 0.0 self.waitingForOperand = True @pyqtSlot() def on_offButton_clicked(self): self.close()","tags":"Course","url":"https://cpa.kmol.info/40623123/doc/trunk/blog/2017-fall-cadp-w16-18.html"},{"title":"2017 Fall CP 第13-15週","text":"協同周 這幾個禮拜我們選了組長 開始學習計算機的程式","tags":"Course","url":"https://cpa.kmol.info/40623123/doc/trunk/blog/2017-fall-cadp-w13-15.html"},{"title":"2017 Fall CPA 第九週","text":"","tags":"Course","url":"https://cpa.kmol.info/40623123/doc/trunk/blog/40623123-W9.html"},{"title":"2017 Fall CP 第9週","text":"W9 Exam 今天上台報告隨然沒有超出時間但是我的內容 還要再進步 投影片網址 https://cpa.kmol.info/40623123/doc/trunk/23.html#/1","tags":"Course","url":"https://cpa.kmol.info/40623123/doc/trunk/blog/2017-fall-cadp-w9.html"},{"title":"2017 Fall CP 第8週","text":"W8 Exam 學習心得 今天是期中考周作網誌 自評成績 每週出席情況: 100%(沒來有請公假) 紙本筆記: 75% 隨身碟內容: 85% 個人倉儲內容: 70% 各週上課摘要: 70% 自評分數 75","tags":"Course","url":"https://cpa.kmol.info/40623123/doc/trunk/blog/2017-fall-cadp-w8.html"},{"title":"2017 Fall CP 第7週","text":"W7 Exam 今日應公假未到 自評成績 每週出席情況: 100%(沒來有請公假) 紙本筆記: 75% 隨身碟內容: 85% 個人倉儲內容: 70% 各週上課摘要: 70% 自評分數 75","tags":"Course","url":"https://cpa.kmol.info/40623123/doc/trunk/blog/2017-fall-cadp-w7.html"},{"title":"2017 Fall CPA 第七週","text":"","tags":"Course","url":"https://cpa.kmol.info/40623123/doc/trunk/blog/40623123-W7-exam.html"},{"title":"2017 Fall CPA 第八週","text":"","tags":"Course","url":"https://cpa.kmol.info/40623123/doc/trunk/blog/40623123-W8.html"},{"title":"2017 Fall CP 第四週","text":"領英Linkedin Xming putty structural query sqlitey 資料庫 倉儲","tags":"Course","url":"https://cpa.kmol.info/40623123/doc/trunk/blog/2017-fall-cadp-w4.html"},{"title":"2017 Fall CP 第二週","text":"本學期起各班透過一台 Ubuntu 16.04 主機, 建立 Fossil SCM 伺服器, 且每一學員發放一個 Fossil SCM 倉儲, 其中各學員可以利用 Wiki 與 Technote 紀錄學習資料外, 還可以將靜態網誌與簡報檔案放入 Files 資料區. 測試沒有綁定帳號後, 指定帳號新增提交推送版本. 測試 commit 時沒有 --user-override 4062 測試 push 才綁帳號 configuration - 組成內容與狀態 scm - software configuration management batch - 批次 remark - 註解 default - 內定, 默認 fossil clone - 克隆 fossil add - 新增 fossil commit - 提交 fossil push - 推送 fossil remote-url off fossil ui - user interface url - uniform resource locator https - secure hypertext transfer protocol protocol - 協定 certification - 簽章 - public key server certify - 認證 vacuum - 吸塵 fossil clone https://mde1a1.kmol.info/pymcadp pymcadp.fossil IDE - Integrated Development Environment 希望為每位學員建立倉儲的設想流程如下: 各學員可以獨立維護倉儲內容, 也可以在總管理員的權限下, 為分組學員建立帳號, 逐步導入協同設計 各學員的倉儲以修課班級命名伺服器, 以學號命名倉儲, 方便依照此一規律擷取各學員的倉儲頁面. 各學員能以電子郵件收到與新建倉儲相關的連結, 以及帳號密碼. 必須擴增 Ubuntu ulimits -n 同時開檔的設限範圍 (內定只允許同時開啟 1024 個檔案) 解決方案: 主機名稱可以透過 domain dns 中的 CNAME 別名方式處理, 因為目前所能提供出來的 IPv4/IPv6 雙支援主機, 之前已經都設定了符號名稱. fossil init 雖然提供指定管理者的 -A 選項功能, 但是無法直接指定管理者對應密碼, 因此必須建立倉儲之後, 再利用 fossil user 修改密碼, 之後再利用 Gmail 寄出通知信, 其中提供倉儲連結, 登入帳號與密碼等資訊. 建立各學員倉儲檔案的程式如下, 如前所述, 主要透過兩個 Fossil SCM 指令完成, 在 Windows 採用 Fossil SCM 2.3 版建立所有 .fossil 倉儲時, 將同時以 email 通知各學員. 各學員的 .fossil 檔案再以 sftp 送到伺服主機對應帳號所屬的目錄下. 必須要特別注意的是, 採用 Fossil SCM 2.3 版所建立的 .fossil 倉儲檔案, 在 Ubuntu 操作系統上也必須採用相同版本的 fossil, 否則舊版 fossil 可能無法開啟新版 fossil 程式所建立的倉儲檔. import os import string import random # 使用 Gmail 寄信必須導入下列模組 import smtplib import re from email.mime.text import MIMEText from email.header import Header # 用來以亂數建立密碼的韓式 def id_generator(size=6, chars=string.ascii_uppercase + string.digits): ''' source: https://stackoverflow.com/questions/2257441/random-string-generation-with-upper-case-letters-and-digits-in-python ''' return ''.join(random.choice(chars) for _ in range(size)) # 讀取學員名單, 逐一取得學員學號, 學員名單, 檢查點 1/7 student_data = open(\"2017fall_list/1b.txt\").read() student_list = student_data.splitlines() # 利用 gmail smtp 功能寄信 server = smtplib.SMTP('smtp.gmail.com:587') server.ehlo() server.starttls() # 以下必須準備好對應郵件帳號與密碼的外部檔案, 所提供的寄信帳號, 是否可以寄信, 檢查點 2/7 ''' 寄信之前必須到 https://www.google.com/settings/security/lesssecureapps 修改權限, 改為較低安全權限 否則無法使用程式寄信! ''' # 從外部檔案讀取要用來寄信的 gmail 帳號與密碼 # mail.txt 格式為: 電子郵箱,對應密碼, 以逗點隔開, 檢查點 3/7 email_data = open(\"z:/2017fall/mail.txt\").read() email, email_password= email_data.split(\",\") print(email, email_password) # 是否登入所提供寄信的電子郵箱, 4/7 server.login(email, email_password) # 不同課程名稱, 與對應主機名稱, 必須配合修改 5/7 course_title = \"計算機程式\" fossil_server = \"cpb.kmol.info\" for student_num in student_list: username = student_num repository = username + '.fossil' # 利用所提供的字串, 以亂數組成六個字元的密碼 password = id_generator(6, \"23456789abcdef\") print(student_num, \", \" , password) # 執行 dos command 指令, 建立倉儲 os.system(\"fossil init -A \" +username + \" \" + repository) print(\"已經建立倉儲 \" + repository) # 執行 dos command 指令, 修改使用者密碼 os.system(\"fossil user password \" + username + \" \" + password + \" -R \" + repository) print(\"已經修改密碼\") # 利用 Gmail 寄信, 告知各學員倉儲連結與帳號密碼 # 每一位學員收到的 output 都從這裡 reset output = \"\" # 若學號欄為空, 則不寄信 if student_num != \"\": # output 為寄給每一位學員的資料表格 mail_content = student_num+' 您好: 您在 '+course_title+' 課程中的區域網路倉儲: https://'+fossil_server+'/'+student_num+' ' mail_content += '管理帳號為:'+ student_num + ' 管理密碼為: '+ password+' ' print(student_num) print(mail_content) # 至此 mail_content 已經確定 # 在測試與實際寄送資料, 也必須配合修改, 檢查點 6/7 receiver_email = student_num + \"@gm.nfu.edu.tw\" # 測試用 #receiver_email = student_num+\"@mde.tw\" # 列出收信人 email 位址 #print(receiver_email) #message= MIMEText(mail_content,'plain','UTF-8') # 以 html 格式寄信 message= MIMEText(mail_content,'html','UTF-8') message['Subject'] = Header(course_title+\" Fossil SCM 帳號通知\", 'UTF-8') # 可以先不寄信, 確定格式正確後再開啟, 是否實際寄出信件, 檢查點 7/7 server.sendmail(\"gmail_address\", receiver_email, message.as_string()) server.quit() 各班所完成的主機: 二甲電腦輔助設計實習: https://cadpa.kmol.info 二乙電腦輔助設計實習: https://cadpb.kmol.info 一甲計算機程式: https://cpa.kmol.info 一乙計算機程式: https://cpb.kmol.info","tags":"Course","url":"https://cpa.kmol.info/40623123/doc/trunk/blog/2017-fall-cadp-w2.html"}]}